name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'

jobs:
  # Code Quality and Testing
  quality:
    name: Code Quality & Testing
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

      neo4j:
        image: neo4j:5.15-community
        ports:
          - 7474:7474
          - 7687:7687
        env:
          NEO4J_AUTH: neo4j/test
        options: >-
          --health-cmd "cypher-shell -u neo4j -p test 'RETURN 1'"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm ls --depth=0

      - name: Type checking
        run: npm run typecheck

      - name: Code linting
        run: npm run lint

      - name: Code formatting check
        run: npm run format:check

      - name: Unit tests
        run: npm run test:unit
        env:
          NODE_ENV: test
          REDIS_URL: redis://localhost:6379/15
          NEO4J_URI: bolt://localhost:7687
          NEO4J_USER: neo4j
          NEO4J_PASSWORD: test

      - name: Integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          REDIS_URL: redis://localhost:6379/15
          NEO4J_URI: bolt://localhost:7687
          NEO4J_USER: neo4j
          NEO4J_PASSWORD: test

      - name: Coverage report
        run: npm run test:coverage
        env:
          NODE_ENV: test
          REDIS_URL: redis://localhost:6379/15
          NEO4J_URI: bolt://localhost:7687
          NEO4J_USER: neo4j
          NEO4J_PASSWORD: test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            coverage/
            junit.xml

  # Build and Docker
  build:
    name: Build & Docker
    runs-on: ubuntu-latest
    needs: quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Build Docker image
        run: |
          docker build -t layered-memory-mcp:latest .
          docker build -t layered-memory-mcp:${{ github.sha }} .

      - name: Test Docker image
        run: |
          docker run --rm -d --name test-container -p 3000:3000 layered-memory-mcp:latest
          sleep 10
          # Basic health check
          curl -f http://localhost:3000/health || exit 1
          docker stop test-container

      - name: Save Docker image
        if: github.ref == 'refs/heads/main'
        run: |
          docker save layered-memory-mcp:latest | gzip > layered-memory-mcp.tar.gz

      - name: Upload Docker image artifact
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: layered-memory-mcp.tar.gz

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Performance testing
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Start services
        run: docker-compose up -d redis neo4j chromadb

      - name: Wait for services
        run: |
          timeout 60 bash -c 'until nc -z localhost 6379; do sleep 1; done'
          timeout 60 bash -c 'until nc -z localhost 7687; do sleep 1; done'
          timeout 60 bash -c 'until nc -z localhost 8000; do sleep 1; done'

      - name: Run performance benchmarks
        run: npm run benchmark || echo "Benchmark script not yet implemented"

      - name: Stop services
        run: docker-compose down

  # Deployment preparation
  deploy-prep:
    name: Deployment Preparation
    runs-on: ubuntu-latest
    needs: [build, security, performance]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Prepare deployment manifests
        run: |
          # Substitute environment variables in deployment templates
          envsubst < .github/deploy/docker-compose.prod.yml > docker-compose.deploy.yml
        env:
          IMAGE_TAG: ${{ github.sha }}

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-artifacts
          path: |
            docker-compose.deploy.yml
            layered-memory-mcp.tar.gz

      - name: Create release notes
        run: |
          echo "# Release ${{ github.sha }}" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## Changes" >> RELEASE_NOTES.md
          git log --oneline --pretty=format:"- %s" $(git describe --tags --abbrev=0)..HEAD >> RELEASE_NOTES.md || echo "- Initial release" >> RELEASE_NOTES.md

      - name: Upload release notes
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: RELEASE_NOTES.md